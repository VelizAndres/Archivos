/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.meia;

import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
/**
 *
 * @author José De León
 */
public class Contactos extends javax.swing.JFrame {

    /**
     * Creates new form Contactos
     */
    public Contactos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cb_lista = new javax.swing.JComboBox<>();
        btn_guardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_usuario = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        txt_apellido = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btn_buscar = new javax.swing.JButton();
        lbl_usuario = new javax.swing.JLabel();
        btn_admin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cb_lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_listaActionPerformed(evt);
            }
        });

        btn_guardar.setText("AGREGAR");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setText("CONTACTOS");

        jLabel2.setText("BUSCAR CONTACTOS");

        jLabel3.setText("Usuario");

        jLabel4.setText("Nombre");

        jLabel5.setText("Apellido");

        txt_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usuarioActionPerformed(evt);
            }
        });

        jLabel6.setText("RESULTADOS");

        btn_buscar.setText("BUSCAR");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        lbl_usuario.setFont(new java.awt.Font("Century Gothic", 3, 12)); // NOI18N
        lbl_usuario.setText("Usuario");

        btn_admin.setText("ADMINISTRAR CONTACTOS");
        btn_admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_adminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addGap(282, 282, 282))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(289, 289, 289)
                        .addComponent(lbl_usuario)
                        .addGap(377, 377, 377))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txt_usuario))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cb_lista, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(btn_guardar)))
                        .addGap(48, 48, 48))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_usuario)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txt_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_buscar)
                            .addComponent(btn_admin)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_lista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_guardar))))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usuarioActionPerformed

    private void cb_listaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_listaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_listaActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        cb_lista.removeAllItems();
        if(!txt_usuario.getText().equals("")&& txt_nombre.getText().equals("") &&txt_apellido.getText().equals("")){
            String[] result1 = BuscarPorUsuario(txt_usuario.getText(),"MEIA\\bitacora_usuario.txt", "Error");
            if(result1!=null) cb_lista.addItem(NormalizarResultado(result1));
            String[] result2 = BuscarPorUsuario(txt_usuario.getText(),"MEIA\\usuario.txt", "Error");
            if(result2!=null) cb_lista.addItem(NormalizarResultado(result2));
            if(result1==null && result2==null){
                JOptionPane.showMessageDialog(null, "No se encontró el usuario","Error", WIDTH);
            }
        }
        if(txt_usuario.getText().equals("")&& !txt_nombre.getText().equals("") && txt_apellido.getText().equals("")){
            BuscarPorNombre(txt_nombre.getText(),"MEIA\\bitacora_usuario.txt", "Error");
            BuscarPorNombre(txt_nombre.getText(),"MEIA\\usuario.txt", "Error");
            if(cb_lista.getItemCount()== 0){
                JOptionPane.showMessageDialog(null, "No se encontraron resultados con ese nombre","Error", WIDTH);
            }
        }
        if(txt_usuario.getText().equals("")&& txt_nombre.getText().equals("") && !txt_apellido.getText().equals("")){
            BuscarPorApellido(txt_apellido.getText(),"MEIA\\bitacora_usuario.txt", "Error");
            BuscarPorApellido(txt_apellido.getText(),"MEIA\\usuario.txt", "Error");
            if(false){
                JOptionPane.showMessageDialog(null, "No se encontró resultados con ese apellido","Error", WIDTH);
            }
        }
        if(txt_usuario.getText().equals("")&& !txt_nombre.getText().equals("") && !txt_apellido.getText().equals("")){
            BuscarPorNombreyApellido(txt_nombre.getText(),txt_apellido.getText(),"MEIA\\bitacora_usuario.txt", "Error");
            BuscarPorNombreyApellido(txt_nombre.getText(),txt_apellido.getText(),"MEIA\\usuario.txt", "Error");
            if(cb_lista.getItemCount()== 0){
                JOptionPane.showMessageDialog(null, "No se encontró resultados con ese apellido","Error", WIDTH);
            }
        }
        if(txt_usuario.getText().equals("")&& txt_nombre.getText().equals("") && txt_apellido.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Debe llenar almenos un campo para la búsqueda","Error", WIDTH);
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_adminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_adminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_adminActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        String[] registro = cb_lista.getSelectedItem().toString().split("/");
        boolean ingresado = LlenarArchivo(lbl_usuario.getText(),registro[0],"MEIA\\bitacora_contactos.txt");
        if(ingresado){
            //ACTUALIZAR DESCRIPTOR
            
            
            ///VERIFICACION REORGANIZACION
            File file_desc_bitacora = new File("MEIA\\desc_bitacora_contactos.txt");
                    String path_desc_bitacora = file_desc_bitacora.getAbsolutePath();                                  

                    int registros_bitacora = ObtenerDato(path_desc_bitacora,"registros_activos","Error");                     
                    int max_reorganizacion = ObtenerDato(path_desc_bitacora,"max_reorganizacion","Error");

                    if(registros_bitacora == max_reorganizacion)
                    {
                        //REORGANIZAR SI ES NECESARIO
                        Reorganizar("MEIA\\contactos.txt", "MEIA\\bitacora_contactos.txt");
                    }
                    
            JOptionPane.showMessageDialog(null, "Contacto guardado existosamente!!!","Confirmación", WIDTH);
        }else{
            JOptionPane.showMessageDialog(null, "Error al guardar el contacto","Error", WIDTH);
        }
        
    }//GEN-LAST:event_btn_guardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Contactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Contactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Contactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Contactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Contactos().setVisible(true);
            }
        });
    }

    public String NormalizarResultado(String[] linea){
        String result="";
        result+=linea[0].trim();
        result+=" / "+linea[1].trim();
        result+=" / "+linea[2].trim();
        result+=" / "+linea[6].trim();
        return result;    
    }
    
    public String[] BuscarPorUsuario(String usuario, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String current_user = split[0];
                            String estatus = split[9];
                            if(usuario.equals(current_user.trim())&& estatus.trim().equals("1")) return split;
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return null;
    }
    
    public void BuscarPorNombre(String nombre, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String current_name = split[1];
                            String estatus = split[9];
                            if(nombre.equals(current_name.trim())&& estatus.trim().equals("1")){
                                cb_lista.addItem(NormalizarResultado(split));
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
    }
    
    public void BuscarPorApellido(String apellido, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String current_last_name = split[2];
                            String estatus = split[9];
                            if(apellido.equals(current_last_name.trim())&& estatus.trim().equals("1")){
                                cb_lista.addItem(NormalizarResultado(split));
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
    }
    
    public void BuscarPorNombreyApellido(String nombre, String apellido, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String current_last_name = split[2];
                            String current_name = split[1];
                            String estatus = split[9];
                            if(apellido.equals(current_last_name.trim())&& nombre.equals(current_name.trim()) && estatus.trim().equals("1")){
                                cb_lista.addItem(NormalizarResultado(split));
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }
                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
    }
    
    public boolean LlenarArchivo(String usuario, String contacto, String path)
    {
        File file_bitacora = new File(path);    
        //NORMALIZAR ENTRADAS

        Date date = new Date();
        //Caso 3: obtenerhora y fecha y salida por pantalla con formato:
        DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fecha = hourdateFormat.format(date);
        
        String f_usuario = String.format("%-20s", usuario);        
        String f_contacto = String.format("%-20s", contacto);
        String f_fecha_transaccion = String.format("%-20s", fecha);
        String f_usuario_transaccion = String.format("%-20s", usuario);
        String f_estatus = String.format("%-10s", "1"); 
         
        String registro = f_usuario+"|"+f_contacto+"|"+f_fecha_transaccion+"|"+f_usuario_transaccion+"|"+f_estatus;
   
        try
        {
                FileWriter Escribir = new FileWriter(file_bitacora,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(registro+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close();             
                return true;
        }
        catch(Exception ex)
        {
            return false;
        }       
    }
    
    void Reorganizar(String path_master, String path_bitacora){
        String[] llaves_master = ObtenerLlavesActivas(path_master,"Error");
        String[] llaves_bitacora = ObtenerLlavesActivas(path_bitacora,"Error");
        String[] llaves_totales = new String[ llaves_master.length + llaves_bitacora.length ];
        
        System.arraycopy( llaves_master, 0, llaves_totales, 0, llaves_master.length );
        System.arraycopy( llaves_bitacora, 0, llaves_totales, llaves_master.length, llaves_bitacora.length );
        
        //String[] llaves_totales = (String[])ArraysUtils.addAll(llaves_bitacora, llaves_master);
         Arrays.sort(llaves_totales);
        
        //CREAR ARCHIVO TEMPORAL
        File file_temporal = new File("MEIA\\temporal.txt");
        
        try
        {
            if (!file_temporal.exists())
            {
                file_temporal.createNewFile();
            }
            
                FileWriter Escribir = new FileWriter(file_temporal,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                String encabezado = "usuario             |contacto            |fecha_transaccion   |usuario_transaccion |estatus   ";
                bw.write(encabezado+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                
            for (int i = 0; i < llaves_totales.length; i++) {
               String[] registro_valido = ObtenerRegistro(llaves_totales[i],"MEIA\\bitacora_contactos.txt","Error");
               if(registro_valido == null) registro_valido = ObtenerRegistro(llaves_totales[i],"MEIA\\contactos.txt","Error");
               
               LlenarArchivo(registro_valido[0], registro_valido[1], "MEIA\\temporal.txt");    
            }          
            
            //delete bitacora y master
           
            if(BorrarArchivos("MEIA\\bitacora_contactos.txt","MEIA\\usuario.txt")){
                System.gc();   
                File antiguo = new File("MEIA\\temporal.txt");
                File nuevo = new File("MEIA\\contactos.txt");

                if(antiguo.renameTo(nuevo))
                {
                //create bitacora con encabezado
                File file_bitacora_nuevo = new File("MEIA\\bitacora_contactos.txt");
                FileWriter Escribir2 = new FileWriter(file_bitacora_nuevo,true);
                BufferedWriter bw2 = new BufferedWriter(Escribir2);                
                bw2.write(encabezado+ System.getProperty( "line.separator" ));
                bw2.close();
                bw2 = null;
                Escribir.close(); 
                Escribir = null;
                }    
            }           
 
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, "ERROR !!!","Error", WIDTH);
        }      
    }
    
    boolean BorrarArchivos(String path1, String path2)
    {
        System.gc();
         File file_bitacora = new File(path1);
         String path_bi = file_bitacora.getAbsolutePath();     
         File file_bitacora2 = new File(path_bi);      

         File file_usuario = new File(path2);
         String path_us = file_usuario.getAbsolutePath();     
         File file_usuario2 = new File(path_us); 
         
         boolean delete1 = file_bitacora2.delete();   
         boolean delete2 = file_usuario2.delete();
         if(delete1 && delete2) return true;
         
         return    false; 
    }
    
    public String[] ObtenerRegistro(String key, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String key_file = split[0]+split[1];
                            if(key.equals(key_file.trim())) return split;
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return null;
    }
    
    String[] ObtenerLlavesActivas(String path, String strError){
        ArrayList<String> llaves = new ArrayList<String>();
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5].trim();
                            if(estatus.equals("1")){
                                String key  = split[0].trim() + split[1].trim();
                                 llaves.add(key);
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError = ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        String[] result = new String[llaves.size()];
        result = llaves.toArray(result);
        return result;  
    }
    
    int ObtenerDato(String path, String campo, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split(":");
                            String campo_ar = split[0];
                            if(campo_ar.equals(campo)) return Integer.parseInt(split[1].trim());
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }
        }
        else
        {
            strError="No existe el archivo";
        }
        return 0;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_admin;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JComboBox<String> cb_lista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lbl_usuario;
    private javax.swing.JTextField txt_apellido;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_usuario;
    // End of variables declaration//GEN-END:variables
}
