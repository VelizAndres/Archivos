/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.meia;

import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;




/**
 *
 * @author José De León
 */
public class Lista_Usuario extends javax.swing.JFrame {

    /**
     * Creates new form Lista_Usuario
     */
    public Lista_Usuario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbl_usuario = new javax.swing.JLabel();
        cb_listas = new javax.swing.JComboBox<>();
        cb_contactos = new javax.swing.JComboBox<>();
        btn_listas = new javax.swing.JButton();
        btn_contactos = new javax.swing.JButton();
        txt_descripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_guardar = new javax.swing.JButton();
        btn_admin_listas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setText("LISTAS DE DISTRIBUCIÓN");

        lbl_usuario.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lbl_usuario.setText("usuario");

        btn_listas.setText("Obtener listas");
        btn_listas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_listasActionPerformed(evt);
            }
        });

        btn_contactos.setText("Obtener contactos");
        btn_contactos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_contactosActionPerformed(evt);
            }
        });

        jLabel3.setText("Descripción");

        btn_guardar.setText("GUADAR LISTA DE DISTRIBUCIÓN");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_admin_listas.setText("ADMINISTRAR LISTAS");
        btn_admin_listas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_admin_listasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cb_listas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cb_contactos, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(38, 38, 38)
                                        .addComponent(txt_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(200, 200, 200)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_admin_listas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_contactos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_listas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(179, 179, 179))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbl_usuario)
                                .addGap(361, 361, 361)))))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_usuario)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_listas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_listas))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_contactos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_contactos))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_admin_listas))
                .addGap(15, 15, 15)
                .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_listasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_listasActionPerformed
        // TODO add your handling code here:
        cb_listas.removeAllItems();
        BuscarListas(true);
    }//GEN-LAST:event_btn_listasActionPerformed

    private void btn_contactosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_contactosActionPerformed
        // TODO add your handling code here:
        cb_contactos.removeAllItems();
        BuscarRegistros();
    }//GEN-LAST:event_btn_contactosActionPerformed

    
    void ActualizarAsociacion(int posicion, String path, String[] linea){
        String result = "";
        int asociados = Integer.parseInt(linea[3].trim());
        asociados++;
        
        result = linea[0]+"|"+linea[1]+"|"+linea[2]+"|"+asociados+"              |"+linea[4]+"|"+linea[5];
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek(posicion*139);
            archivo.writeBytes(result);
            archivo.close();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al eliminar contacto","Error", WIDTH);
        }
    }
    
    public int ObtenerPosicionRegistro(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            
                            String current_key = split[0].trim() + split[1].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    
    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        String[] registro_lista = cb_listas.getSelectedItem().toString().split("\\|");
        String key_lista = registro_lista[0].trim()+registro_lista[1].trim();
        int pos_master = ObtenerPosicionRegistro(key_lista,"MEIA\\lista.txt","Error");
        ActualizarAsociacion(pos_master, "MEIA\\lista.txt", registro_lista);
        
        String[] registro_contacto = cb_contactos.getSelectedItem().toString().split("\\|");
        
        
        String key = registro_lista[0].trim()+lbl_usuario.getText().trim()+registro_contacto[1].trim();       
        boolean existe_indice = ExisteLlave(key,"MEIA\\Lista_usuario.txt","Error");
        
        if(existe_indice)
        {
            JOptionPane.showMessageDialog(null, "La lista de distribución ya existe","Error", WIDTH);
        }
        else
        {    
            boolean ingresado = LlenarBloque(registro_lista, registro_contacto,txt_descripcion.getText() ,"MEIA\\Lista_usuario.txt");
            boolean ingresado2 = LlenarIndice(registro_lista, registro_contacto,"MEIA\\indice_Lista_usuario.txt");
            if(ingresado && ingresado2)
            {
                //si llega a este punto
                //REORGANIZARPUNTERO
                
                //paso 1: obtener llaves activas
                String[] llaves_activas = ObtenerLlavesActivas("MEIA\\indice_Lista_usuario.txt","Error");
                Arrays.sort(llaves_activas);
                
                if(llaves_activas.length>1)
                {
                    for (int i = 0; i < llaves_activas.length; i++) 
                    {
                        String[] registro_temporal = ObtenerRegistro(llaves_activas[i],"MEIA\\indice_Lista_usuario.txt","Error");
                        int posicion_actual = ObtenerPosicionRegistro_indice(llaves_activas[i],"MEIA\\indice_Lista_usuario.txt","Error");
                        
                        if((i+1) == llaves_activas.length) break;
                        int posicion_siguiente = ObtenerPosicionRegistro_indice(llaves_activas[i+1],"MEIA\\indice_Lista_usuario.txt","Error");
                        String puntero_nuevo = ActualizarApuntador(registro_temporal,posicion_siguiente);
                        Modificar_puntero(posicion_actual,"MEIA\\indice_Lista_usuario.txt",puntero_nuevo);
                    }
                }
                ActualizarDescriptor_bloque(lbl_usuario.getText());
                
                int inicio = ObtenerPosicionRegistro_indice(llaves_activas[0],"MEIA\\indice_Lista_usuario.txt","Error");
                ActualizarDescriptor_indice(lbl_usuario.getText(),inicio);                
                
                JOptionPane.showMessageDialog(null, "Lista guardada existosamente!!!","Confirmación", WIDTH);
                cb_listas.removeAllItems();
                BuscarListas(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Error al guardar la lista de distribución","Error", WIDTH);
            }
        }
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_admin_listasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_admin_listasActionPerformed
        // TODO add your handling code here:
        Lista_Usuario_admin admin_c = new Lista_Usuario_admin();
        admin_c.lbl_usuario.setText(lbl_usuario.getText());
        admin_c.show();
        this.setVisible(false);
    }//GEN-LAST:event_btn_admin_listasActionPerformed

    void Modificar_puntero(int posicion, String path, String linea){
        
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek(posicion*139);
            archivo.writeBytes(linea);
            archivo.close();
            System.gc();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al modificar punteros","Error", WIDTH);
        }
    }
    
    String ActualizarApuntador(String[] linea, int posicion_siguiente){
        String puntero = String.format("%-10s", posicion_siguiente);
        String ajuste = String.format("%-10s", linea[7].trim());
        
        String result = linea[0]+"|"+linea[1]+"|"+puntero+"|"+linea[3]+"|"+linea[4]+"|"+linea[5]+"|"+linea[6]+"|"+ajuste;
        return result;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lista_Usuario().setVisible(true);
            }
        });
    }

    public void ActualizarDescriptor_bloque(String usuario)
    {
        try{
            System.gc();
            File file_descriptorUser = new File("MEIA\\desc_Lista_usuario.txt");
            
            Date date = new Date();

            DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fecha = hourdateFormat.format(date);
        
            ArrayList<String> lines = new ArrayList<>(Files.readAllLines(Paths.get(file_descriptorUser.getAbsolutePath())));
            lines.set(3, "fecha_modificacion: " + fecha);
            lines.set(4, "usuario_modificacion: " + usuario);
            
            String[] total_records = lines.get(5).split(":");
            int total = Integer.parseInt(total_records[1].trim())+1;
            lines.set(5, "#_registros: " + total);
            
            String[] active_records = lines.get(6).split(":");
            int actives = Integer.parseInt(active_records[1].trim())+1;
            lines.set(6, "registros_activos: " + actives);
            
            FileWriter Changer = new FileWriter(file_descriptorUser, false);
            BufferedWriter LineChanger = new BufferedWriter(Changer);
            for (int i = 0; i < lines.size(); i++)
            {
                LineChanger.write(lines.get(i));
                if (i != lines.size() - 1)
                {
                    LineChanger.newLine();
                }
            }
            LineChanger.close();
            Changer.close();
            System.gc();       
        }
        catch(IOException ex){
        
        }
        System.gc();
    }
    
    public void ActualizarDescriptor_indice(String usuario, int inicio)
    {
        try{
            System.gc();
            File file_descriptorUser = new File("MEIA\\desc_indice_Lista_usuario.txt");
            
            Date date = new Date();

            DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fecha = hourdateFormat.format(date);
        
            ArrayList<String> lines = new ArrayList<>(Files.readAllLines(Paths.get(file_descriptorUser.getAbsolutePath())));
            lines.set(3, "fecha_modificacion: " + fecha);
            lines.set(4, "usuario_modificacion: " + usuario);
            
            String[] total_records = lines.get(5).split(":");
            int total = Integer.parseInt(total_records[1].trim())+1;
            lines.set(5, "#_registros: " + total);
            
            String[] active_records = lines.get(6).split(":");
            int actives = Integer.parseInt(active_records[1].trim())+1;
            lines.set(6, "registros_activos: " + actives);
            
            
            lines.set(9, "registro_inicial: " + inicio);
            lines.set(10, "#_bloques: 1");
            
            FileWriter Changer = new FileWriter(file_descriptorUser, false);
            BufferedWriter LineChanger = new BufferedWriter(Changer);
            for (int i = 0; i < lines.size(); i++)
            {
                LineChanger.write(lines.get(i));
                if (i != lines.size() - 1)
                {
                    LineChanger.newLine();
                }
            }
            LineChanger.close();
            Changer.close();
            System.gc();       
        }
        catch(IOException ex){
        
        }
        System.gc();
    }
    
    public void BuscarListas(boolean all)
    {
        if (!all)
        {
                ArrayList<String> agregados = LlenarListasPorNombre("MEIA\\bitacora_lista.txt",lbl_usuario.getText(),txt_descripcion.getText(),"Error");
                for (int i = 0; i < agregados.size(); i++) {
                    cb_listas.addItem(agregados.get(i));
                }
                ArrayList<String> agregados2 = LlenarListasPorNombre("MEIA\\lista.txt",lbl_usuario.getText(),txt_descripcion.getText(),"Error");
                for (int i = 0; i < agregados2.size(); i++) {
                    cb_listas.addItem(agregados2.get(i));
                }
                if(agregados.isEmpty() && agregados2.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "No se encontraron registros asociados","Error", WIDTH);
                }
        }
        else
        {
            ArrayList<String> agregados = LlenarListas("MEIA\\bitacora_lista.txt",lbl_usuario.getText(),"Error");
                for (int i = 0; i < agregados.size(); i++) {
                    cb_listas.addItem(agregados.get(i));
                }
                ArrayList<String> agregados2 = LlenarListas("MEIA\\lista.txt",lbl_usuario.getText(),"Error");
                for (int i = 0; i < agregados2.size(); i++) {
                    cb_listas.addItem(agregados2.get(i));
                }
                if(agregados.isEmpty() && agregados2.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "No se encontraron registros asociados","Error", WIDTH);
                }
        }
    }  
    
    public ArrayList<String> LlenarListasPorNombre(String path, String usuario, String nombreLista, String strError){
        ArrayList<String> lista = new ArrayList<String>();
                
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            String list_name = split[0];
                            String current_user = split[1].trim();
                            if(usuario.trim().equals(current_user) && estatus.trim().equals("1") && list_name.trim().equals(nombreLista))
                            {
                                lista.add(Linea);
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();  
                    System.gc();
                } catch (IOException ex) {
                    strError = ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return lista;
    }
    
    public ArrayList<String> LlenarListas(String path, String usuario, String strError){
        ArrayList<String> lista = new ArrayList<String>();
                
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            String current_user = split[1].trim();
                            if(usuario.trim().equals(current_user) && estatus.trim().equals("1"))
                            {
                                lista.add(Linea);
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();  
                    System.gc();
                } catch (IOException ex) {
                    strError = ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return lista;
    }
    
    public void BuscarRegistros()
    {
                ArrayList<String> agregados = LlenarAdmin("MEIA\\bitacora_contactos.txt",lbl_usuario.getText(),"Error");
                for (int i = 0; i < agregados.size(); i++) {
                    cb_contactos.addItem(agregados.get(i));
                }
                ArrayList<String> agregados2 = LlenarAdmin("MEIA\\contactos.txt",lbl_usuario.getText(),"Error");
                for (int i = 0; i < agregados2.size(); i++) {
                    cb_contactos.addItem(agregados2.get(i));
                }
                if(agregados.isEmpty() && agregados2.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "No se encontraron resgistros asociados","Error", WIDTH);
                }
    }
    
    public ArrayList<String> LlenarAdmin(String path, String usuario,String strError){
        ArrayList<String> lista = new ArrayList<String>();
                
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[4];
                            
                            String current_user = split[0].trim();
                            if(usuario.trim().equals(current_user) && estatus.trim().equals("1"))
                            {
                                lista.add(Linea);
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();  
                    System.gc();
                } catch (IOException ex) {
                    strError = ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return lista;
    }
    
    public boolean ExisteLlave(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            
                            String current_key = split[0].trim() + split[1].trim()+ split[2].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return true;
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return false;
    }
    
    public boolean LlenarBloque(String[] lista, String[] contacto,String desc ,String path)
    {
        File file_bitacora = new File(path);    
        //NORMALIZAR ENTRADAS

        Date date = new Date();

        DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fecha = hourdateFormat.format(date);
        
        String f_nombre_lista = String.format("%-30s", lista[0].trim());
        String f_usuario = String.format("%-20s", lista[1].trim());
        String f_usuario_asociado= String.format("%-20s", contacto[1].trim());
        String f_descripcion=String.format("%-40s", desc.trim());
        String f_fecha_transaccion = String.format("%-20s", fecha);
        String f_estatus = String.format("%-10s", "1");
           
        String registro = f_nombre_lista+"|"+f_usuario+"|"+f_usuario_asociado+"|"+f_descripcion+"|"+f_fecha_transaccion+"|"+f_estatus;
   
        try
        {
                FileWriter Escribir = new FileWriter(file_bitacora,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(registro+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                System.gc();
                return true;
        }
        catch(Exception ex)
        {
            return false;
        }       
    }
    
    public boolean LlenarIndice(String[] lista, String[] contacto ,String path)
    {
        File file_bitacora = new File(path);    
        //NORMALIZAR ENTRADAS

        Date date = new Date();

        DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fecha = hourdateFormat.format(date);
        
        String key = lista[0].trim()+lista[1].trim()+contacto[1].trim();
        int posicion = ObtenerPosicionRegistro_bloque(key, "MEIA\\Lista_usuario.txt","Error");
        
        String f_registro = String.format("%-10s", posicion);
        String f_posicion = String.format("%-10s", "1."+posicion);
        String f_siguiente = String.format("%-10s", "0");
        
        
        String f_nombre_lista = String.format("%-30s", lista[0].trim());
        String f_usuario = String.format("%-20s", lista[1].trim());
        String f_usuario_asociado= String.format("%-20s", contacto[1].trim());
        String f_fecha_creacion = String.format("%-20s", fecha);
        String f_estatus = String.format("%-10s", "1");
           
        String registro = f_registro+"|"+f_posicion+"|"+f_siguiente+"|"+f_nombre_lista+"|"+f_usuario+"|"+f_usuario_asociado+"|"+f_fecha_creacion+"|"+f_estatus;
   
        try
        {
                FileWriter Escribir = new FileWriter(file_bitacora,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(registro+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                System.gc();
                return true;
        }
        catch(Exception ex)
        {
            return false;
        }       
    }
    
    public int ObtenerPosicionRegistro_indice(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7];
                            
                            String current_key = split[3].trim() + split[4].trim()+ split[5].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    
    public int ObtenerPosicionRegistro_bloque(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            
                            String current_key = split[0].trim() + split[1].trim()+ split[2].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    
    String[] ObtenerLlavesActivas(String path, String strError){
        ArrayList<String> llaves = new ArrayList<String>();
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7].trim();
                            if(estatus.equals("1")){
                                String key  = split[3].trim() + split[4].trim()+split[5].trim();
                                 llaves.add(key);
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError = ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        String[] result = new String[llaves.size()];
        result = llaves.toArray(result);
        System.gc();
        return result;  
    }
    
    public String[] ObtenerRegistro(String key, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String key_file = split[3].trim()+split[4].trim()+split[5].trim();
                            if(key.equals(key_file.trim()))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close(); 
                                System.gc();
                                return split;
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        System.gc();
        return null;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_admin_listas;
    private javax.swing.JButton btn_contactos;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_listas;
    private javax.swing.JComboBox<String> cb_contactos;
    private javax.swing.JComboBox<String> cb_listas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel lbl_usuario;
    private javax.swing.JTextField txt_descripcion;
    // End of variables declaration//GEN-END:variables
}
