/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.meia;

import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;



/**
 *
 * @author José De León
 */
public class Lista_Usuario_admin extends javax.swing.JFrame {

    /**
     * Creates new form Lista_Usuario_admin
     */
    public Lista_Usuario_admin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_usuario = new javax.swing.JLabel();
        cb_listas = new javax.swing.JComboBox<>();
        btn_buscar = new javax.swing.JButton();
        btn_modificar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        txt_descripcion = new javax.swing.JTextField();
        txt_fecha = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btn_eliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbl_nombre = new javax.swing.JLabel();
        lbl_asociado = new javax.swing.JLabel();
        btn_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setText("ADMINISTRACIÓN");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("LISTAS DE DISTRIBUCIÓN");

        lbl_usuario.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lbl_usuario.setText("PRUEBA");

        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        btn_modificar.setText("Modificar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        btn_actualizar.setText("Actualizar");
        btn_actualizar.setEnabled(false);
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        jLabel3.setText("Descripción");

        jLabel4.setText("Fecha de creación");

        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombre de lista: ");

        jLabel6.setText("Usuario asociado: ");

        lbl_nombre.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        lbl_nombre.setText("---");

        lbl_asociado.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        lbl_asociado.setText("---");

        btn_salir.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        btn_salir.setText("SALIR");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(cb_listas, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_modificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_eliminar)
                .addGap(0, 94, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(54, 54, 54))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbl_usuario)
                                .addGap(133, 133, 133)))
                        .addGap(230, 230, 230))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(txt_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lbl_asociado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lbl_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(141, 141, 141))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_salir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btn_salir)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_usuario)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_listas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar)
                    .addComponent(btn_modificar)
                    .addComponent(btn_eliminar))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_actualizar))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lbl_nombre))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lbl_asociado))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        cb_listas.removeAllItems();
        BuscarRegistros();
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        // TODO add your handling code here:       
        String[] line;
        try
        {
            line = cb_listas.getSelectedItem().toString().split("\\|");
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Debe selecionar un registro","Error", WIDTH);
            return;
        }
        
        BuscarRegistros();     
        Date date = new Date();
        DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        txt_fecha.setText(hourdateFormat.format(date));
        txt_descripcion.setText(line[3].trim());
        lbl_nombre.setText(line[0].trim());
        lbl_asociado.setText(line[2].trim());
        btn_actualizar.setEnabled(true);
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        if(cb_listas.getItemCount()==0){
            JOptionPane.showMessageDialog(null, "No posee registros para eliminar","Error", WIDTH);
        }
        else
        {
            String[] line = cb_listas.getSelectedItem().toString().split("\\|");
            String key = line[0].trim()+line[1].trim()+line[2].trim();

            int pos_bloque = ObtenerPosicionRegistro_bloque(key,"MEIA\\Lista_usuario.txt","Error");
            if(pos_bloque!=-1)
            {
                String linea_nueva = cb_listas.getSelectedItem().toString().substring(0, 135);
                linea_nueva = linea_nueva +  "0         ";    
                Eliminar_bloque(pos_bloque,"MEIA\\Lista_usuario.txt",linea_nueva);
                ActualizarDescriptor_Eliminacion(lbl_usuario.getText(),"MEIA\\desc_Lista_usuario.txt");
                
                //AQUI EMPIEZA EL INDICE
                String[] registro_indice = ObtenerRegistro_indice(key, "MEIA\\indice_Lista_usuario.txt", "Error").split("\\|");
                
                int posicion_anterior = ObtenerPosicionAnterior_indice(registro_indice[0].trim(),"MEIA\\indice_Lista_usuario.txt","Error");
                String registro_nuevo = ObtenerRegistro_indice(posicion_anterior,"MEIA\\indice_Lista_usuario.txt","Error");
                
                String[] nueva_linea = registro_nuevo.split("\\|");
                nueva_linea[2]=registro_indice[2];
                
                String result = nueva_linea[0]+"|"+nueva_linea[1]+"|"+nueva_linea[2]+"|"+nueva_linea[3]+"|"+nueva_linea[4]+"|"+nueva_linea[5]+"|"+nueva_linea[6]+"|"+nueva_linea[7];
                //MADAR A ESCRIBIR RESULT EN EL INDICE
                Modificar_puntero(Integer.parseInt(nueva_linea[0].trim()), "MEIA\\indice_Lista_usuario.txt", result);
                
                //BORRAR DEL INDICE
                String registro_eliminar = ObtenerRegistro_indice(Integer.parseInt(registro_indice[0].trim()),"MEIA\\indice_Lista_usuario.txt","Error");
                registro_eliminar = registro_eliminar.substring(0,127)+  "0         ";
                
                Eliminar_indice(Integer.parseInt(registro_indice[0].trim()),"MEIA\\indice_Lista_usuario.txt",registro_eliminar);
                ActualizarDescriptor_Eliminacion(lbl_usuario.getText(),"MEIA\\desc_indice_Lista_usuario.txt");
            }
        }
        
        cb_listas.removeAllItems();
        BuscarRegistros();
        JOptionPane.showMessageDialog(null, "Lista eliminada exitosamente!!!","Exito", WIDTH);
    }//GEN-LAST:event_btn_eliminarActionPerformed

    void Modificar_puntero(int posicion, String path, String linea){
        
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek(posicion*139);
            archivo.writeBytes(linea);
            archivo.close();
            System.gc();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al modificar punteros","Error", WIDTH);
        }
    }
    
    public void ActualizarDescriptor_Eliminacion(String usuario, String path)
    {
        try{
            System.gc();
            File file_descriptorUser = new File(path);
            
            Date date = new Date();
            DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fecha = hourdateFormat.format(date);
        
            ArrayList<String> lines = new ArrayList<>(Files.readAllLines(Paths.get(file_descriptorUser.getAbsolutePath())));
            lines.set(3, "fecha_modificacion: " + fecha);
            lines.set(4, "usuario_modificacion: " + usuario);
            
            String[] inactive_records = lines.get(7).split(":");
            int total = Integer.parseInt(inactive_records[1].trim())+1;
            lines.set(7, "registros_inactivos: " + total);
            
            String[] active_records = lines.get(6).split(":");
            int actives = Integer.parseInt(active_records[1].trim())-1;
            lines.set(6, "registros_activos: " + actives);
            
            FileWriter Changer = new FileWriter(file_descriptorUser, false);
            BufferedWriter LineChanger = new BufferedWriter(Changer);
            for (int i = 0; i < lines.size(); i++)
            {
                LineChanger.write(lines.get(i));
                if (i != lines.size() - 1)
                {
                    LineChanger.newLine();
                }
            }
            LineChanger.close();
            Changer.close();
            System.gc();       
        }
        catch(IOException ex){
        
        }
        System.gc();
    }
    
    public String ObtenerRegistro_indice(int position, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    int index =0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            if(index==position)
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close(); 
                                System.gc();
                                return Linea;
                            }
                        }
                        Linea = LeerArchivo.readLine();
                        index++;
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        System.gc();
        return null;
    }
    
    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        // TODO add your handling code here:
        if(cb_listas.getItemCount()==0){
            JOptionPane.showMessageDialog(null, "No posee registros para actualizar","Error", WIDTH);
        }
        else
        {
        String[] line = cb_listas.getSelectedItem().toString().split("\\|");
        String key = line[0].trim()+line[1].trim()+line[2].trim();
        
        int pos_bloque = ObtenerPosicionRegistro_bloque(key,"MEIA\\Lista_usuario.txt","Error");
        if(pos_bloque!=-1)
        {
            String linea_nueva = cb_listas.getSelectedItem().toString().substring(0, 73);
            String f_descripcion=String.format("%-40s", txt_descripcion.getText().trim());
            String f_fecha_transaccion = String.format("%-20s", txt_fecha.getText().trim());
            String f_estatus =   "1        ";
            
            
            linea_nueva = linea_nueva + f_descripcion+ "|" +f_fecha_transaccion+"|"+f_estatus;
            Actualizar(pos_bloque,"MEIA\\Lista_usuario.txt",linea_nueva);
        }
        
        JOptionPane.showMessageDialog(null, "Lista de distribución actualizada exitosamente!!!","Exito", WIDTH);
        cb_listas.removeAllItems();
        BuscarRegistros();
        txt_fecha.setText("");
        txt_descripcion.setText("");
        lbl_nombre.setText("---");
        lbl_asociado.setText("---");
        btn_actualizar.setEnabled(false);
        } 
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        // TODO add your handling code here:
        int iRespuesta = JOptionPane.showConfirmDialog(null, "<html>¿Esta seguro que desea salir?<br> Se realizará una reorganización<html>", "¿Salir?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (iRespuesta == 0) 
            {   
                Reorganizar_bloque("MEIA\\Lista_usuario.txt");      
                Reorganizar_indice("MEIA\\Lista_usuario.txt");
                System.exit(0);
            } 
    }//GEN-LAST:event_btn_salirActionPerformed

    void Reorganizar_bloque(String path_master){
        String[] llaves_master = ObtenerRegistrosActivos(path_master,"Error");
      
        //CREAR ARCHIVO TEMPORAL
        File file_temporal = new File("MEIA\\temporal_bloque.txt");
        
        try
        {
            if (!file_temporal.exists())
            {
                file_temporal.createNewFile();
            }
            
                FileWriter Escribir = new FileWriter(file_temporal,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                String encabezado = "nombre_lista                  |usuario             |usuario asociado    |descripción                             |fecha creación      |estatus   ";
                bw.write(encabezado+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                
            for (int i = 0; i < llaves_master.length; i++) {
                FileWriter Escribir2 = new FileWriter(file_temporal,true);
                BufferedWriter bw2 = new BufferedWriter(Escribir2);               
                bw2.write(llaves_master[i]+ System.getProperty( "line.separator" ));
                bw2.close();
                Escribir.close();
            }          
            
            //delete bitacora y master
            System.gc();
            
           boolean deleted = BorrarArchivos("MEIA\\Lista_usuario.txt");
            if(deleted){
                System.gc();   
                File antiguo = new File("MEIA\\temporal_bloque.txt");
                File nuevo = new File("MEIA\\Lista_usuario.txt");

                boolean renamed = antiguo.renameTo(nuevo);
                System.gc();
                if(renamed)
                {
                    ActualizarDescriptorBloque_Despues(lbl_usuario.getText());
                }    
            }           
 
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, "ERROR !!!","Error", WIDTH);
        }      
    }
    
    void Reorganizar_indice(String path_master){
        
        String[] llaves_master = ObtenerRegistrosActivos(path_master,"Error");
      
        //CREAR ARCHIVO TEMPORAL
        File file_temporal = new File("MEIA\\temporal_indice.txt");
        
        try
        {
            if (!file_temporal.exists())
            {
                file_temporal.createNewFile();
            }
            
                FileWriter Escribir = new FileWriter(file_temporal,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                String encabezado = "registro  |posicion  |siguiente |nombre lista                  |usuario             |usuario asociado    |fecha creación      |estatus   ";
                bw.write(encabezado+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                
 
            /////
            int inicio = 0;
            for (int i = 0; i < llaves_master.length; i++) 
            {
                boolean ingresado = LlenarIndice(llaves_master[i],"MEIA\\temporal_indice.txt");
                if(ingresado)
                {
                    String[] llaves_activas = ObtenerLlavesActivas("MEIA\\temporal_indice.txt","Error");
                    Arrays.sort(llaves_activas);

                    if(llaves_activas.length>1)
                    {
                        for (int j = 0; j < llaves_activas.length; j++) 
                        {
                            String[] registro_temporal = ObtenerRegistro(llaves_activas[j],"MEIA\\temporal_indice.txt","Error");
                            int posicion_actual = ObtenerPosicionRegistro_indice(llaves_activas[j],"MEIA\\temporal_indice.txt","Error");

                            if((j+1) == llaves_activas.length) break;
                            int posicion_siguiente = ObtenerPosicionRegistro_indice(llaves_activas[j+1],"MEIA\\temporal_indice.txt","Error");
                            String puntero_nuevo = ActualizarApuntador(registro_temporal,posicion_siguiente);
                            Modificar_puntero(posicion_actual,"MEIA\\temporal_indice.txt",puntero_nuevo);
                        }
                    }

                    inicio = ObtenerPosicionRegistro_indice(llaves_activas[0],"MEIA\\indice_Lista_usuario.txt","Error");
                    
                }
            }                   
            
            ////
            
            //delete bitacora y master
            System.gc();
            
           boolean deleted = BorrarArchivos("MEIA\\indice_Lista_usuario.txt");
            if(deleted){
                System.gc();   
                File antiguo = new File("MEIA\\temporal_indice.txt");
                File nuevo = new File("MEIA\\indice_Lista_usuario.txt");

                boolean renamed = antiguo.renameTo(nuevo);
                System.gc();
                if(renamed)
                {
                    ActualizarDescriptor_indice(lbl_usuario.getText(), inicio,llaves_master.length);
                }    
            }           
 
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, "ERROR !!!","Error", WIDTH);
        }      
    }
    
    public boolean LlenarIndice(String registro ,String path)
    {
        File file_bitacora = new File(path);    
        //NORMALIZAR ENTRADAS
        String[] linea = registro.split("\\|");
        
        Date date = new Date();
        DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fecha = hourdateFormat.format(date);
        
        String key = linea[0].trim()+linea[1].trim()+linea[2].trim();
        int posicion = ObtenerPosicionRegistro_bloque(key, "MEIA\\Lista_usuario.txt","Error");
        
        String f_registro = String.format("%-10s", posicion);
        String f_posicion = String.format("%-10s", "1."+posicion);
        String f_siguiente = String.format("%-10s", "0");
        
        
        String f_nombre_lista = String.format("%-30s", linea[0].trim());
        String f_usuario = String.format("%-20s", linea[1].trim());
        String f_usuario_asociado= String.format("%-20s", linea[2].trim());
        String f_fecha_creacion = String.format("%-20s", fecha);
        String f_estatus = String.format("%-10s", "1");
           
        String result = f_registro+"|"+f_posicion+"|"+f_siguiente+"|"+f_nombre_lista+"|"+f_usuario+"|"+f_usuario_asociado+"|"+f_fecha_creacion+"|"+f_estatus;
   
        try
        {
                FileWriter Escribir = new FileWriter(file_bitacora,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(result+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close(); 
                System.gc();
                return true;
        }
        catch(Exception ex)
        {
            return false;
        }       
    }
    
    public void ActualizarDescriptor_indice(String usuario, int inicio, int total)
    {
        try{
            System.gc();
            File file_descriptorUser = new File("MEIA\\desc_indice_Lista_usuario.txt");
            
            Date date = new Date();

            DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fecha = hourdateFormat.format(date);
        
            ArrayList<String> lines = new ArrayList<>(Files.readAllLines(Paths.get(file_descriptorUser.getAbsolutePath())));
            lines.set(3, "fecha_modificacion: " + fecha);
            lines.set(4, "usuario_modificacion: " + usuario);
            

            lines.set(5, "#_registros: " + total);
            lines.set(6, "registros_activos: " + total);
            lines.set(6, "registros_inactivos: 0");
            
            lines.set(9, "registro_inicial: " + inicio);
            lines.set(10, "#_bloques: 1");
            
            FileWriter Changer = new FileWriter(file_descriptorUser, false);
            BufferedWriter LineChanger = new BufferedWriter(Changer);
            for (int i = 0; i < lines.size(); i++)
            {
                LineChanger.write(lines.get(i));
                if (i != lines.size() - 1)
                {
                    LineChanger.newLine();
                }
            }
            LineChanger.close();
            Changer.close();
            System.gc();       
        }
        catch(IOException ex){
        
        }
        System.gc();
    }
    
    String[] ObtenerLlavesActivas(String path, String strError){
        ArrayList<String> llaves = new ArrayList<String>();
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7].trim();
                            if(estatus.equals("1")){
                                String key  = split[3].trim() + split[4].trim()+split[5].trim();
                                 llaves.add(key);
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError = ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        String[] result = new String[llaves.size()];
        result = llaves.toArray(result);
        System.gc();
        return result;  
    }
    
    public String[] ObtenerRegistro(String key, String path, String strError){
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String key_file = split[3].trim()+split[4].trim()+split[5].trim();
                            if(key.equals(key_file.trim()))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close(); 
                                System.gc();
                                return split;
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        System.gc();
        return null;
    }
    
    public int ObtenerPosicionRegistro_indice(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7];
                            
                            String current_key = split[3].trim() + split[4].trim()+ split[5].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    
    String ActualizarApuntador(String[] linea, int posicion_siguiente){
        String puntero = String.format("%-10s", posicion_siguiente);
        String ajuste = String.format("%-10s", linea[7].trim());
        
        String result = linea[0]+"|"+linea[1]+"|"+puntero+"|"+linea[3]+"|"+linea[4]+"|"+linea[5]+"|"+linea[6]+"|"+ajuste;
        return result;
    }
    
    boolean BorrarArchivos(String path1)
    {
        System.gc();
         File file_bitacora = new File(path1);
         String path_bi = file_bitacora.getAbsolutePath();     
         File file_bitacora2 = new File(path_bi);      

         
         boolean delete1 = file_bitacora2.delete();   
         
         System.gc();
         if(delete1) return true;    
         return    false; 
    }
    
    
    String[] ObtenerRegistrosActivos(String path, String strError)
    {
        ArrayList<String> llaves = new ArrayList<String>();
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5].trim();
                            if(estatus.equals("1")){
                                 llaves.add(Linea);
                            }
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError = ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        String[] result = new String[llaves.size()];
        result = llaves.toArray(result);
        System.gc();
        return result; 
    }
    
    public void ActualizarDescriptorBloque_Despues(String usuario)
    {
        try{
            System.gc();
            File file_descriptorUser = new File("MEIA\\desc_Lista_Usuario.txt");
            
            Date date = new Date();

            DateFormat hourdateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fecha = hourdateFormat.format(date);
        
            ArrayList<String> lines = new ArrayList<>(Files.readAllLines(Paths.get(file_descriptorUser.getAbsolutePath())));
            lines.set(3, "fecha_modificacion: " + fecha);
            lines.set(4, "usuario_modificacion: " + usuario);
            
            int actives = ObtenerRegistrosActivos("MEIA\\Lista_Usuario.txt","Error").length;
            lines.set(5, "#_registros: " + actives);
            lines.set(6, "registros_activos: " + actives);
            lines.set(7, "registros_inactivos: " + 0);
            
            FileWriter Changer = new FileWriter(file_descriptorUser, false);
            BufferedWriter LineChanger = new BufferedWriter(Changer);
            for (int i = 0; i < lines.size(); i++)
            {
                LineChanger.write(lines.get(i));
                if (i != lines.size() - 1)
                {
                    LineChanger.newLine();
                }
            }
            LineChanger.close();
            Changer.close();
            System.gc();       
        }
        catch(IOException ex){
        
        }
        System.gc();
    }
    
    void Actualizar(int posicion, String path, String linea){
        
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek((posicion*148)-1);
            archivo.writeBytes(linea);
            archivo.close();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al actualizar la lista","Error", WIDTH);
        }
    }
    
    public int ObtenerPosicionRegistro_bloque(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            
                            String current_key = split[0].trim() + split[1].trim()+ split[2].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    
    public String ObtenerRegistro_indice(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7];
                            
                            String current_key = split[3].trim() + split[4].trim()+ split[5].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return Linea;
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return "";
    }
    
    public int ObtenerPosicionAnterior_indice(String key, String path, String strError)
    {
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    int index = 0;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[7];
                            
                            String current_key = split[2].trim();
                            if(key.equals(current_key) && estatus.trim().equals("1"))
                            {
                                LecturaArchivo.close();
                                LeerArchivo.close();
                                System.gc();
                                return index;
                            } 
                        }
                        index++;
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();              
                } catch (IOException ex) {
                    strError= ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return -1;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lista_Usuario_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lista_Usuario_admin().setVisible(true);
            }
        });
    }
    
    void Eliminar_bloque(int posicion, String path, String linea){
        
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek((posicion*148)-1);
            archivo.writeBytes(linea);
            archivo.close();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al eliminar lista","Error", WIDTH);
        }
    }
    
    void Eliminar_indice(int posicion, String path, String linea){
        
        try
        {
            RandomAccessFile archivo = new RandomAccessFile(path, "rw");
            archivo.seek((posicion*140)-2);
            archivo.writeBytes(linea);
            archivo.close();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error al eliminar del indice","Error", WIDTH);
        }
    }
    public void BuscarRegistros()
    {
                ArrayList<String> agregados = LlenarAdmin("MEIA\\Lista_usuario.txt",lbl_usuario.getText(),"Error");
                for (int i = 0; i < agregados.size(); i++) {
                    cb_listas.addItem(agregados.get(i));
                }                
                if(agregados.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "No se encontraron resgistros asociados","Error", WIDTH);
                }
    }

    public ArrayList<String> LlenarAdmin(String path, String usuario,String strError){
        ArrayList<String> lista = new ArrayList<String>();
                
        File Archivo = new File(path);
        if(Archivo.exists()==true)
        {
            FileReader LecturaArchivo;
            try {
                LecturaArchivo = new FileReader(Archivo);
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                String Linea="";
                try {
                    Linea = LeerArchivo.readLine();
                    String[] split;
                    while(Linea != null)
                    {
                        if(!"".equals(Linea))
                        {
                            split = Linea.split("\\|");
                            String estatus = split[5];
                            
                            String current_user = split[1].trim();
                            if(usuario.trim().equals(current_user) && estatus.trim().equals("1"))
                            {
                                lista.add(Linea);
                            } 
                        }
                        Linea = LeerArchivo.readLine();
                    }

                    LecturaArchivo.close();
                    LeerArchivo.close();  
                    System.gc();
                } catch (IOException ex) {
                    strError = ex.getMessage();
                }
            } catch (FileNotFoundException ex) {
                strError= ex.getMessage();
            }            
        }
        else
        {
            strError="No existe el archivo";
        }
        return lista;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_salir;
    private javax.swing.JComboBox<String> cb_listas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lbl_asociado;
    private javax.swing.JLabel lbl_nombre;
    public static javax.swing.JLabel lbl_usuario;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_fecha;
    // End of variables declaration//GEN-END:variables
}
